/* Auto-generated by genmsg_cpp for file /home/ttremblay/groovy_workspace/sandbox/EposManager/msg/GroupDigitalInputInfo.msg */
#ifndef EPOSMANAGER_MESSAGE_GROUPDIGITALINPUTINFO_H
#define EPOSMANAGER_MESSAGE_GROUPDIGITALINPUTINFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "EposManager/DigitalInputInfo.h"

namespace EposManager
{
template <class ContainerAllocator>
struct GroupDigitalInputInfo_ {
  typedef GroupDigitalInputInfo_<ContainerAllocator> Type;

  GroupDigitalInputInfo_()
  : io_group()
  {
  }

  GroupDigitalInputInfo_(const ContainerAllocator& _alloc)
  : io_group(_alloc)
  {
  }

  typedef std::vector< ::EposManager::DigitalInputInfo_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::EposManager::DigitalInputInfo_<ContainerAllocator> >::other >  _io_group_type;
  std::vector< ::EposManager::DigitalInputInfo_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::EposManager::DigitalInputInfo_<ContainerAllocator> >::other >  io_group;


  typedef boost::shared_ptr< ::EposManager::GroupDigitalInputInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::EposManager::GroupDigitalInputInfo_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GroupDigitalInputInfo
typedef  ::EposManager::GroupDigitalInputInfo_<std::allocator<void> > GroupDigitalInputInfo;

typedef boost::shared_ptr< ::EposManager::GroupDigitalInputInfo> GroupDigitalInputInfoPtr;
typedef boost::shared_ptr< ::EposManager::GroupDigitalInputInfo const> GroupDigitalInputInfoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::EposManager::GroupDigitalInputInfo_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::EposManager::GroupDigitalInputInfo_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace EposManager

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::EposManager::GroupDigitalInputInfo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::EposManager::GroupDigitalInputInfo_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::EposManager::GroupDigitalInputInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6f71fe8202e041d98df9b82317e4d80b";
  }

  static const char* value(const  ::EposManager::GroupDigitalInputInfo_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6f71fe8202e041d9ULL;
  static const uint64_t static_value2 = 0x8df9b82317e4d80bULL;
};

template<class ContainerAllocator>
struct DataType< ::EposManager::GroupDigitalInputInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "EposManager/GroupDigitalInputInfo";
  }

  static const char* value(const  ::EposManager::GroupDigitalInputInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::EposManager::GroupDigitalInputInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# This represents the motor information of a group of motors\n\
\n\
DigitalInputInfo[] io_group\n\
\n\
================================================================================\n\
MSG: EposManager/DigitalInputInfo\n\
# This represents an input/output control structure for a Maxon motor attached to an EPOS 2 controller.  \n\
# The node_id is the node_id set on the epos controller itself\n\
# The state corresponds with the desired state of the digital outputs.\n\
\n\
uint16 node_id\n\
uint8 dIO_3_state\n\
uint8 dIO_4_state\n\
time stamp\n\
\n\
\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::EposManager::GroupDigitalInputInfo_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::EposManager::GroupDigitalInputInfo_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.io_group);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GroupDigitalInputInfo_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::EposManager::GroupDigitalInputInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::EposManager::GroupDigitalInputInfo_<ContainerAllocator> & v) 
  {
    s << indent << "io_group[]" << std::endl;
    for (size_t i = 0; i < v.io_group.size(); ++i)
    {
      s << indent << "  io_group[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::EposManager::DigitalInputInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.io_group[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // EPOSMANAGER_MESSAGE_GROUPDIGITALINPUTINFO_H

